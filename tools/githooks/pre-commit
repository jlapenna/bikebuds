#!/bin/sh
# husky

# Hook created by Husky
#   Version: 1.3.1
#   At: 4/20/2019, 5:06:31 PM
#   See: https://github.com/typicode/husky#readme

# From npm package
#   Name: husky
#   Directory: /home/jlapenna/code/bikebuds/gae/frontend/node_modules/husky
#   Homepage: https://github.com/typicode/husky#readme

scriptPath="gae/frontend/node_modules/husky/run.js"
hookName=`basename "$0"`
gitParams="$*"

debug() {
  [ "${HUSKY_DEBUG}" = "true" ] && echo "husky:debug $1"
}

function ctrl_c() {
  echo "Trapped and ignored ctrl+c"
}
trap ctrl_c INT

########################################
# Stash all changes not part of the commit, only test the changing code.
# https://stackoverflow.com/questions/20479794/how-do-i-properly-git-stash-pop-in-pre-commit-hooks-to-get-a-clean-working-tree
old_stash=$(git rev-parse -q --verify refs/stash)
git stash save -q --keep-index
new_stash=$(git rev-parse -q --verify refs/stash)

# If there were no changes (e.g., `--amend` or `--allow-empty`)
# then nothing was stashed, and we should skip everything,
# including the tests themselves.  (Presumably the tests passed
# on the previous commit, so there is no need to re-run them.)
if [ "$old_stash" = "$new_stash" ]; then
    echo "pre-commit script: no changes to test"
    sleep 1 # XXX hack, editor may erase message
    exit 0
fi

########################################
# Use husky to test the react web app.
husky_result=0;

debug "$hookName hook started..."

if ! command -v node >/dev/null 2>&1; then
  echo "Can't find node in PATH, trying to find a node binary on your system"
fi

if [ -f "$scriptPath" ]; then
  # if [ -t 1 ]; then
  #   exec < /dev/tty
  # fi
  if [ -f ~/.huskyrc ]; then
    debug "source ~/.huskyrc"
    source ~/.huskyrc
  fi
  echo "Running husky hooks."
  gae/frontend/node_modules/run-node/run-node "$scriptPath" $hookName "$gitParams"
  husky_result=$?;
else
  echo "Can't find Husky, skipping $hookName hook"
  echo "You can reinstall it using 'npm install husky --save-dev' or delete this hook"
fi


########################################
# Test the flutter app
flutter_result=0;

pushd flutter
flutter test
flutter_result=$?;
popd

########################################
# TODO: Sanitize or fix python.
# https://prettier.io/docs/en/precommit.html
py_result=0;

py_files=$(git diff --cached --name-only --diff-filter=ACM "*.py" | sed 's| |\\ |g')


########################################
# Restore the git adjustments made before running the tests.

git reset --hard -q && git stash apply --index -q && git stash drop -q

if [[ ${husky_result} > 0 || ${flutter_result} > 0 || ${py_result} > 0 ]]; then
  echo "Abandoming the commit. Fix the above errors and try again."
  exit 10;
fi
